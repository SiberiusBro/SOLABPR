#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <sys/stat.h>

long calculate_directory_size(const char *path) {
    struct dirent *entry;
    struct stat info;
    DIR *directory;
    long size = 0;

    if (!(directory = opendir(path))) {
        return 0;
    }

    while ((entry = readdir(directory)) != NULL) {
        char full_path[1024];
        snprintf(full_path, sizeof(full_path), "%s/%s", path, entry->d_name);

        if (lstat(full_path, &info) == 0) {
            if (S_ISDIR(info.st_mode)) {
                if (strcmp(entry->d_name, ".") != 0 && strcmp(entry->d_name, "..") != 0) {
                    size += calculate_directory_size(full_path);
                }
            } else {
                size += info.st_size;
            }
        }
    }

    closedir(directory);
    return size;
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        printf("Utilizare: %s <fisier_lista_directoare> <fisier_iesire>\n", argv[0]);
        return 1;
    }

    FILE *input = fopen(argv[1], "r");
    FILE *output = fopen(argv[2], "w");

    if (input == NULL || output == NULL) {
        printf("Nu s-a putut deschide fisierul.\n");
        return 1;
    }

    char path[1024];
    while (fgets(path, sizeof(path), input)) {
        path[strcspn(path, "\n")] = 0; // EliminÄƒ newline-ul

        long directory_size = calculate_directory_size(path);

        int symbolic_links = 0;
        struct dirent *entry;
        DIR *directory = opendir(path);
        if (directory != NULL) {
            while ((entry = readdir(directory)) != NULL) {
                char full_path[1024];
                snprintf(full_path, sizeof(full_path), "%s/%s", path, entry->d_name);

                struct stat info;
                if (lstat(full_path, &info) == 0 && S_ISLNK(info.st_mode)) {
                    symbolic_links++;
                }
            }
            closedir(directory);
        }

        fprintf(output, "%s\t%ld\t%d\n", path, directory_size, symbolic_links);
    }

    fclose(input);
    fclose(output);

    return 0;
}